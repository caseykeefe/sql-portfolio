--Dataset: dvdrental.tar
--Source: https://drive.google.com/file/d/1oBxiJkST9-7IjOMY-8aMXEMbrL6XcX49/view
--Provider: Jose Portillo, Pierian Data
--Queried With: pgAdmin 4 (PostgreSQL)

--Table: Column(s), Row Count
  --actor: actor_id, first_name, last_name, last_update, 200
  --address: address_id, address, address2, district, city_id, postal_code, phone, last_update, 603
  --category: category_id, name, last_update, 16
  --city: city_id, city, country_id, last_update, 600
  --country: country_id, country, last_update, 109
  --customer: customer_id, store_id, first_name, last_name, email, address_id, activebool, create_date,
    last_update, active, 599
  --film: film_id, title, description, release year, language_id, rental_duration, rental_rate,
    replacement_cost, rating, last_update, special_features, fulltext, 1000
  --film_actor: actor_id, film_id, last_update, 5462
  --film_category: film_id, category_id, last_update, 1000
  --inventory: inventory_id, film_id, store_id, last_update, 4581
  --language: language_id, name, last_update, 6
  --payment: payment_id, customer_id, staff_id, rental_id, amount, payment_date, 14596
  --rental: rental_id, rental_date, inventory_id, customer_id, return_date, staff_id, last_update, 16044
  --staff: staff_id, first_name, last_name, address_id, email, store_id, active, username, password,
    last_update, picture, 2
  --store: store_id, manager_staff_id, address_id, last_update, 2

--EXAMPLE QUERIES AND FUNCTIONS

/*Create Customer Information view*/
CREATE VIEW customer_info AS
SELECT first_name, last_name, address
FROM customer
INNER JOIN address
ON customer.address_id = address.address_id;

/*Compare number of films per rating*/
SELECT
SUM(CASE rating
   		WHEN 'R' THEN 1
   		ELSE 0
END) AS r,
SUM(CASE rating
   		WHEN 'PG' THEN 1
   		ELSE 0
END) AS pg,
SUM(CASE rating
   		WHEN 'PG-13' THEN 1
  		ELSE 0
END) AS pg13
FROM film;

/*Count of films categorized as 'Bargains', 'Regular', and 'Premium'
based on rental price (using SUM)*/
SELECT
SUM(CASE rental_rate
	WHEN 0.99 THEN 1
	ELSE 0
END) AS bargains,
SUM(CASE rental_rate
   	WHEN 2.99 THEN 1
   	ELSE 0
END) AS regular,
SUM(CASE rental_rate
   	WHEN 4.99 THEN 1
   	ELSE 0
END) AS premium
FROM film;

/*Categories for value rental rates*/
SELECT rental_rate,
CASE rental_rate
		WHEN 0.99 THEN 1
		ELSE 0
END
FROM film;

/*Set customer class for first 100 customers as 'Premium' status, 
101 - 200 as 'Plus', remaining as 'Normal'*/
SELECT customer_id,
CASE
		WHEN (customer_id <= 100) THEN 'Premium'
		WHEN (customer_id BETWEEN 100 and 200) THEN 'Plus'
		ELSE 'Normal' 
END AS customer_class
FROM customer;

/*Find pairs of films that have same length (using self-join)*/
SELECT f1.title, f2.title, f1.length 
FROM film AS f1
INNER JOIN film AS f2 ON
f1.film_id != f2.film_id
AND f1.length = f2.length;

/*Customers with payments greater than $10*/
SELECT first_name, last_name
FROM customer AS c
WHERE EXISTS
(SELECT * FROM payment as p
WHERE p.customer_id = c.customer_id
AND amount > 11);

/*Films returned between 29-May-2005 and 30-May-2005*/
SELECT film_id, title
FROM film
WHERE film_id IN
(SELECT inventory.film_id
FROM rental
INNER JOIN inventory ON inventory.inventory_id = rental.inventory_id
WHERE rental.return_date BETWEEN '2005-05-29' AND '2005-05-30')
ORDER BY film_id;

/*Films with higher than average rental rate*/
SELECT title, rental_rate
FROM film
WHERE rental_rate > (SELECT AVG(rental_rate) FROM film);

/*Batch create emails as 'custom_email' from customer names*/
SELECT LOWER(LEFT(first_name, 1)) || LOWER(last_name) || '@gmail.com'
AS custom_email
FROM customer;

/*Rental rate as percentage of replacement cost*/
SELECT title, ROUND(rental_rate/replacement_cost, 2) * 100 
AS percent_cost
FROM film;

/*Total number of payments that occurred on a Tuesday*/
SELECT COUNT (*)
FROM payment
WHERE EXTRACT(dow FROM payment_date) = 2;

/*In which months did payments occur?*/
SELECT DISTINCT(TO_CHAR(payment_date, 'Month')) as payment_month
FROM payment;

/*ID's and titles for films that do not have an inventory ID*/
SELECT film.film_id, film.title, inventory_id
FROM film
LEFT JOIN inventory
ON inventory.film_id = film.film_id
WHERE inventory.film_id IS null;

/*All films with 'Nick Wahlberg' using multiple tables 'film_actor', 'actor',
and 'film'*/
SELECT title, first_name, last_name FROM film_actor
INNER JOIN actor
ON film_actor.actor_id = actor.actor_id
INNER JOIN film
ON film_actor.film_id = film.film_id
WHERE first_name = 'Nick' AND last_name = 'Wahlberg';

/*Determine emails of customers from Texas using INNER JOIN / JOIN of 'address' 
and 'customer' tables*/
SELECT district, email FROM address
INNER JOIN customer
ON address.address_id = customer.address_id
WHERE district = 'California';

/*Customer with highest number ID that name starts with 'C' and address ID 
is lower than 300*/
SELECT first_name, last_name, address_id
FROM customer
WHERE first_name ILIKE 'C%'
AND address_id < '300'
ORDER BY address_id DESC;

/*ID's for customers who have spent more than $50 with Staff Member #2*/
SELECT staff_id, customer_id, SUM(amount)
FROM payment
WHERE staff_id = '2'
GROUP BY staff_id, customer_id
HAVING SUM(amount) > 50;

/*ID's for customers with 40 or more total transactions*/
SELECT customer_id, COUNT(*)
FROM payment
GROUP BY customer_id
HAVING COUNT(*) >= 40;

/*ID's for top five customers with largest spend*/
SELECT customer_id, SUM(amount)
FROM payment
GROUP BY customer_id
ORDER BY SUM(amount) DESC
LIMIT 5;

/*Average replacement cost per MPAA rating*/
SELECT rating, ROUND(AVG(replacement_cost), 2)
FROM film
GROUP BY rating;

/*Group payment amounts by date and order by total amounts*/
SELECT DATE(payment_date), SUM(amount)
FROM payment
GROUP BY DATE(payment_date)
ORDER BY SUM(amount) DESC;

/*List films that end with the letter 'E'*/
SELECT title FROM film
WHERE title ILIKE '%E';

/*List films that start with the letter 'C'*/
SELECT title FROM film
WHERE title ILIKE 'C%';

/*How many films have the word 'Romance' in the title?*/
SELECT COUNT(*) FROM film
WHERE title LIKE '%Romance%';

/*Number of films with a 'PG' rating and replacement cost between $10 and $12*/
SELECT COUNT(*) FROM film
WHERE rating = 'PG' AND replacement_cost BETWEEN 10 AND 12;

/*How may unique districts are customers from?*/
SELECT COUNT(DISTINCT(district))
FROM address;

/*Ten shortest films and their length in ascending order*/
SELECT title, length FROM film
ORDER BY length ASC
LIMIT 10;

/*Determine email address for 'Nancy Thomas'*/
SELECT email FROM customer
WHERE last_name = 'Thomas'
AND first_name = 'Nancy';

/*Conditional count from table using SELECT WHERE*/
SELECT COUNT(*) FROM film
WHERE rental_rate > 4 AND replacement cost >= 19.99;


